{
  "name": "klasse",
  "version": "1.0.6",
  "description": "A minimal class/mixin utility",
  "main": "index.js",
  "scripts": {
    "test": "node test.js",
    "browserify": "mkdir -p build && browserify ./index.js --standalone klasse --outfile build/klasse.js",
    "uglify": "uglifyjs build/klasse.js -o build/klasse.min.js",
    "yuidoc": "yuidoc -n -o docs .",
    "build": "npm run-script browserify && npm run-script uglify && npm run-script yuidoc"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mattdesl/klasse"
  },
  "author": {
    "name": "Matt DesLauriers",
    "email": "mattd@jam3.com"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/mattdesl/klasse/issues"
  },
  "readme": "# klasse\n\nA minimal class/mixin utility for JavaScript, focusing on performance, node compatibility, and composition over inheritance. \n\n## install\n\nUntil this is added to the registry, you can install it like so:\n\n```\nnpm install klasse\n```\n\n## syntax\n\nInspired by [MooTools](http://mootools.net/docs/core/Class/Class) and [jsOOP](https://github.com/MikkoH/jsOOP), the syntax is simple and readable:\n\n```javascript\nvar MyClass = new Class({\n\t\n\t//Optional base class to extend from\n\tExtends: BaseClass,\n\n\t//Optional array of mixins\n\tMixins: [ myMixins ], \n\n\tinitialize:\n\tfunction MyClass() {\n\t\tthis.prop = \"foo\";\n\t}\n});\n```\n\nKeywords:\n\t\n- `Extends`: Optional. Specifies the base class for prototype chain.\n- `Mixins`: Optional. Can be an array of mixins, or just a single mixin. A mixin is an object or Class which defines methods, properties, and so forth to be added directly to a class prototype. \n- `initialize`: Optional. The constructor method, generally a named function for clearer debugging. If not specified, and a base class is given to `Extends`, the constructor will default to calling the base class constructor. Otherwise, an empty constructor will be used.\n\n## performance & V8 optimizations in mind\n\nEncourages best performance in a number of ways:\n\n- Lookups in a long prototype chain can be more costly, so composition over inheritance is encouraged with Mixins.\n- No funky magic going on in the constructor (like in MooTools) -- just what you've defined for `initialize`. This is more ideal for V8 optimizations (hidden classes).\n- Does not clutter objects with caller/super/etc. information. Too many properties in a class will make it less likely to be optimized by V8 and other engines.[1](http://console-to-chrome.appspot.com/#26) \n\n## constructor best practices\n\n- Use a named constructor function so it appears correctly in the debugger, and in stack traces.\n- Declare all instance variables for the class up-front in the constructor. This is done for two reasons:\n\t1. It's ideal for hidden classes in V8 and other engines.\n\t2. If you declare an instance property on the object passed to the `Class` constructor, it will be\n\tplaced in the object's prototype. This leads to an unnecessary lookup in the prototype chain. It also may cause problems for Arrays and Objects, because they are not re-initialized as you might expect.\n\n## example\n\nHere is a Vector example, where we reduce duplicate code but favour composition rather than inheritance. Inheritance (i.e. Vector3 extends Vector2) would lead to unnecessary lookups on the prototype chain.\n\n\n```javascript\nvar Class = require('klasse');\n\n//A lightweight mixin which contains functions, properties, etc \n//to be placed on the prototype.\nvar mixins = {\n\n\tlength: function() {\n\t\treturn Math.sqrt(this.lengthSq());\n\t}\n};\n\nvar Vector2 = new Class({\n\n\t//Mixin the length. This accepts an array of mixins\n\t//(lightweight objects, or a new Class) or you can \n\t//just specify a single mixin.\n\tMixins: mixins,\n\n\t//We use named functions for the constructor, which\n\t//leads to nicer console logs on Chrome.\n\tinitialize: \n\tfunction Vector2(x, y) {\n\t\tthis.x = x || 0;\n\t\tthis.y = y || 0;\n\t},\n\n\tlengthSq: function() {\n\t\tvar x = this.x, \n\t\t\ty = this.y;\n\t\treturn ( x * x + y * y );\n\t}\n});\n\nvar Vector3 = new Class({\n\n\tMixins: mixins,\n\n\tinitialize: \n\tfunction Vector3(x, y, z) {\n\t\t//We can call the constructor like so\n\t\tVector2.call(this, x, y);\n\t\tthis.z = z || 0;\n\t},\n\n\tlengthSq: function() {\n\t\tvar x = this.x,\n\t\t\ty = this.y,\n\t\t\tz = this.z;\n\t\treturn (x * x + y * y + z + z);\n\t}\n});\n```\n\n## \"simplified\" properties\n\nIf an object in the class definition or a mixin has `get` and/or `set` functions, then we assume its a property. It looks like this:\n\n```javascript\nvar Person = new Class({\n\n\tinitialize: \n\tfunction Person(age) {\n\t\tthis._age = age || 0;\n\t},\n\n    /** The 'age' property. */\n    age: {\n        get: function() { \n            return this._age;\n        },\n\n        set: function(value) {\n            if (value < 0)\n                throw new Error(\"age must be positive\");\n            this._age = value;\n        }\n    }\n});\n\n\nvar p = new Person(12);\np.age += 2; //increases age\nconsole.log(p.age); //prints 14\np.age = -1; //throws error\n```\n\nSimplified properties are `enumerable` and `configurable` by default, unless otherwise specified. See below.\n\n## final properties\n\nA property which has `configurable` set to false will be considered final. Trying to Extend or Mixin and override such a property will throw an error. You can skip these errors by setting the `Class.ignoreFinals` flag to `true` before creating new classes. Then, only the first instance of that property will be included in your new Class. \n",
  "readmeFilename": "README.md",
  "_id": "klasse@1.0.6",
  "_from": "klasse@"
}
